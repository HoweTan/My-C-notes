C++中的类也是一种构造类型，但是进行了一些扩展，类的成员不但可以是变量，还可以是函数；通过类定义出来的变量也有特定的称呼，叫做“对象”。
C语言中的 struct 只能包含变量，而C++中的 class 除了可以包含变量，还可以包含函数。
C++、Java、C#、PHP 等语言都支持类和对象，所以使用这些语言编写程序也被称为面向对象编程，这些语言也被称为面向对象的编程语言。C语言因为不支持类和对象的概念，被称为面向过程的编程语言。
cout 和 cin 都是 C++ 的内置对象，而不是关键字。C++ 库定义了大量的类（Class），程序员可以使用它们来创建对象，cout 和 cin 就分别是 ostream 和 istream 类的对象，只不过它们是由标准库的开发者提前创建好的，可以直接拿来使用。
C语言中，动态分配内存用 malloc() 函数，释放内存用 free() 函数。
  int *p = (int*) malloc( sizeof(int) * 10 );  //分配10个int型的内存空间
  free(p);  //释放内存
在C++中，这两个函数仍然可以使用，但是C++又新增了两个关键字，new 和 delete：new 用来动态分配内存，delete 用来释放内存
  int *p = new int;  //分配1个int型的内存空间
  delete p;  //释放内存
new 操作符会根据后面的数据类型来推断所需空间的大小。

如果希望分配一组连续的数据，可以使用 new[]：
int *p = new int[10];  //分配10个int型的内存空间
delete[] p;
用 new[] 分配的内存需要用 delete[] 释放，它们是一一对应的。  

使用内联函数的缺点也是非常明显的，编译后的程序会存在多份相同的函数拷贝，如果被声明为内联函数的函数体非常大，那么编译后的程序体积也将会变得很大，所以再次强调，一般只将那些短小的、频繁调用的函数声明为内联函数。

C++规定，默认参数只能放在形参列表的最后，而且一旦为某个形参指定了默认值，那么它后面的所有形参都必须有默认值。实参和形参的传值是从左到右依次匹配的，默认参数的连续性是保证正确传参的前提。
下面的写法是正确的：
void func(int a, int b=10, int c=20){ }
void func(int a, int b, int c=20){ }
但这样写不可以：
纯文本复制
void func(int a, int b=10, int c=20, int d){ }
void func(int a, int b=10, int c, int d=20){ }

C++ 允许多个函数拥有相同的名字，只要它们的参数列表不同就可以，这就是函数的重载（Function Overloading）。
参数列表又叫参数签名，包括参数的类型、参数的个数和参数的顺序，只要有一个不同就叫做参数列表不同。

